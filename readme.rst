
Ajillion Python Client
======================

Lightweight JSON-RPC client with specific handling of AjillionMax.com Management API.

If you use this client for accessing the Ajillion Management API, or you intend to port 
it to another programming language, you should ask to be invited to our dev-partners
forum by emailing your details to devpartners@ajillionmax.com

Installation
------------

**Using pip:**::

    $ pip install git+https://github.com/Luftzig/ajillion-rpc-client.git#egg=ajillion_py_client

Usage
-----

The basic usage is to connect to a JSON-RPC capable remote server and executing methods on it.
::

    from rpcclient.client import RpcClient

    # Create client, using username and password for the login method.
    # This can be overrided, see documentation for the RpcClient class
    client = RpcClient(host='my.remote.host', username='user', password='password')
    result = client.remote.method(param1='some value', param2=[1, 2, 3])

The above snippet will send the following request to the configured host::

    POST /api { "method": "remote.method", "jsonrpc": "2.0", "id": 987654,
                "params": { "token": "a1b2b3c", "param1": "some value", "param2"=[1, 2, 3]} }

Where 'id' is unique ID used to identify the request generated by the client, and "token" is the login token returned
by the ``login`` method during the client's initialization.

Customization
=============

The client can be customized using the ``configuration`` object which is more thoroughly documented in the RpcClient
class. For example, one can pass the headers that should be sent with all requests, define a custom login method or
replace the request handlers (the method invoked when calling ``client.something.method(**kwargs)``).

Login
-----

The login method can be replaced using the configuration parameter. The ``login`` key in the configuration object can be
either a callable that accepts ``username, password`` parameters and return the authentication token that will be sent
in each request, or the token string itself.

Handlers
--------

The ``handlers`` parameter in the configuration dictionary can be used to define custom request handlers for sending
the request. It accepts an iterable of 2-tuples of callables, the first is the ``can_handle`` method used for determining
if the handler should be used, the second is a constructor or factory method that will return an object with a ``handle``
method for actually handling the request. See ``rpcclient.method_proxy.MethodProxy.default_handlers`` for example.

**Async Handler**

Along with the default simple handler there is an Async handler (by default used for methods that end with '.task')
which uses polling on a task token to wait for the result. This handler can also return a 'Future' object and return
immediately.

Deserialization
---------------

The default handler returns the "result" field of the returned JSON. The value of this field is then passed to an
optional deserializer object that will invoke its ``create_from`` method on the response, possibly returning an object
instead of dictionary.
Deserializers can be configured in the ``configuration`` dictionary or passed to the method at call time using the
``_deserializer`` keyword argument.


Copyright (C) 2015 Crossrider Ltd

